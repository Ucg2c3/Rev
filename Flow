import tensorflow as tf
import tensorflow_federated as tff

# Define a simple model
def create_model():
    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(10, activation='relu', input_shape=(784,)),
        tf.keras.layers.Dense(10, activation='softmax')
    ])
    return model

# Define a function to preprocess the data
def preprocess(dataset):
    def batch_format_fn(element):
        return (tf.reshape(element['pixels'], [-1]), element['label'])

    return dataset.repeat(10).map(batch_format_fn).batch(20)

# Load and preprocess the data
train_data = tff.simulation.datasets.emnist.load_data()
preprocessed_train_data = preprocess(train_data)

# Define the federated training process
def model_fn():
    keras_model = create_model()
    return tff.learning.from_keras_model(
        keras_model,
        input_spec=preprocessed_train_data.element_spec,
        loss=tf.keras.losses.SparseCategoricalCrossentropy(),
        metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])

iterative_process = tff.learning.build_federated_averaging_process(model_fn)
state = iterative_process.initialize()

# Perform federated training
for round_num in range(1, 11):
    state, metrics = iterative_process.next(state, preprocessed_train_data)
    print(f'Round {round_num}, Metrics={metrics}')

# Evaluate the model
evaluation = tff.learning.build_federated_evaluation(model_fn)
eval_metrics = evaluation(state.model, preprocessed_train_data)
print(f'Evaluation Metrics={eval_metrics}')
